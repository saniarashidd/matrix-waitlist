{"version":3,"file":"exception-autocapture.js","sourceRoot":"","sources":["../../../src/entrypoints/exception-autocapture.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    ErrorProperties,\n    errorToProperties,\n    unhandledRejectionToProperties,\n} from '../extensions/exception-autocapture/error-conversion'\nimport { assignableWindow, window } from '../utils/globals'\nimport { ErrorEventArgs } from '../types'\nimport { createLogger } from '../utils/logger'\n\nconst logger = createLogger('[ExceptionAutocapture]')\n\nconst wrapOnError = (captureFn: (props: ErrorProperties) => void) => {\n    const win = window as any\n    if (!win) {\n        logger.info('window not available, cannot wrap onerror')\n    }\n    const originalOnError = win.onerror\n\n    win.onerror = function (...args: ErrorEventArgs): boolean {\n        const errorProperties = errorToProperties({ event: args[0], error: args[4] })\n        captureFn(errorProperties)\n        return originalOnError?.(...args) ?? false\n    }\n    win.onerror.__POSTHOG_INSTRUMENTED__ = true\n\n    return () => {\n        delete win.onerror?.__POSTHOG_INSTRUMENTED__\n        win.onerror = originalOnError\n    }\n}\n\nconst wrapUnhandledRejection = (captureFn: (props: ErrorProperties) => void) => {\n    const win = window as any\n    if (!win) {\n        logger.info('window not available, cannot wrap onUnhandledRejection')\n    }\n\n    const originalOnUnhandledRejection = win.onunhandledrejection\n\n    win.onunhandledrejection = function (...args: [ev: PromiseRejectionEvent]): boolean {\n        const errorProperties = unhandledRejectionToProperties(args)\n        captureFn(errorProperties)\n        return originalOnUnhandledRejection?.apply(win, args) ?? false\n    }\n    win.onunhandledrejection.__POSTHOG_INSTRUMENTED__ = true\n\n    return () => {\n        delete win.onunhandledrejection?.__POSTHOG_INSTRUMENTED__\n        win.onunhandledrejection = originalOnUnhandledRejection\n    }\n}\n\nconst wrapConsoleError = (captureFn: (props: ErrorProperties) => void) => {\n    const con = console as any\n    if (!con) {\n        logger.info('console not available, cannot wrap console.error')\n    }\n\n    const originalConsoleError = con.error\n\n    con.error = function (...args: any[]): void {\n        const event = args.join(' ')\n        const error = args.find((arg) => arg instanceof Error)\n        const errorProperties = error\n            ? errorToProperties({ event, error })\n            : errorToProperties({ event }, { syntheticException: new Error('PostHog syntheticException') })\n\n        captureFn(errorProperties)\n        return originalConsoleError?.(...args)\n    }\n    con.error.__POSTHOG_INSTRUMENTED__ = true\n\n    return () => {\n        delete con.error?.__POSTHOG_INSTRUMENTED__\n        con.error = originalConsoleError\n    }\n}\n\nconst posthogErrorWrappingFunctions = {\n    wrapOnError,\n    wrapUnhandledRejection,\n    wrapConsoleError,\n}\n\nassignableWindow.__PosthogExtensions__ = assignableWindow.__PosthogExtensions__ || {}\nassignableWindow.__PosthogExtensions__.errorWrappingFunctions = posthogErrorWrappingFunctions\n\n// we used to put these on window, and now we put them on __PosthogExtensions__\n// but that means that old clients which lazily load this extension are looking in the wrong place\n// yuck,\n// so we also put them directly on the window\n// when 1.161.1 is the oldest version seen in production we can remove this\nassignableWindow.posthogErrorWrappingFunctions = posthogErrorWrappingFunctions\n\nexport default posthogErrorWrappingFunctions\n"]}