{"version":3,"file":"survey-event-receiver.js","sourceRoot":"","sources":["../../../src/utils/survey-event-receiver.ts"],"names":[],"mappings":"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","sourcesContent":["import { SURVEYS_ACTIVATED } from '../constants'\nimport { Survey } from '../posthog-surveys-types'\n\nimport { ActionMatcher } from '../extensions/surveys/action-matcher'\nimport { PostHog } from '../posthog-core'\nimport { CaptureResult } from '../types'\nimport { SURVEY_LOGGER as logger } from './survey-utils'\nimport { isUndefined } from './type-utils'\n\nconst SURVEY_SHOWN_EVENT_NAME = 'survey shown'\n\nexport class SurveyEventReceiver {\n    // eventToSurveys is a mapping of event name to all the surveys that are activated by it\n    private readonly _eventToSurveys: Map<string, string[]>\n    // actionToSurveys is a mapping of action name to all the surveys that are activated by it\n    private readonly _actionToSurveys: Map<string, string[]>\n    // actionMatcher can look at CaptureResult payloads and match an event to its corresponding action.\n    private _actionMatcher?: ActionMatcher | null\n    private readonly _instance?: PostHog\n\n    constructor(instance: PostHog) {\n        this._instance = instance\n        this._eventToSurveys = new Map<string, string[]>()\n        this._actionToSurveys = new Map<string, string[]>()\n    }\n\n    register(surveys: Survey[]): void {\n        if (isUndefined(this._instance?._addCaptureHook)) {\n            return\n        }\n\n        this._setupEventBasedSurveys(surveys)\n        this._setupActionBasedSurveys(surveys)\n    }\n\n    private _setupActionBasedSurveys(surveys: Survey[]) {\n        const actionBasedSurveys = surveys.filter(\n            (survey: Survey) => survey.conditions?.actions && survey.conditions?.actions?.values?.length > 0\n        )\n\n        if (actionBasedSurveys.length === 0) {\n            return\n        }\n\n        if (this._actionMatcher == null) {\n            this._actionMatcher = new ActionMatcher(this._instance)\n            this._actionMatcher.init()\n            // match any actions to its corresponding survey.\n            const matchActionToSurvey = (actionName: string) => {\n                this.onAction(actionName)\n            }\n\n            this._actionMatcher._addActionHook(matchActionToSurvey)\n        }\n\n        actionBasedSurveys.forEach((survey) => {\n            if (\n                survey.conditions &&\n                survey.conditions?.actions &&\n                survey.conditions?.actions?.values &&\n                survey.conditions?.actions?.values?.length > 0\n            ) {\n                // register the known set of actions with\n                // the action-matcher so it can match\n                // events to actions\n                this._actionMatcher?.register(survey.conditions.actions.values)\n\n                // maintain a mapping of (Action1) => [Survey1, Survey2, Survey3]\n                // where Surveys 1-3 are all activated by Action1\n                survey.conditions?.actions?.values?.forEach((action) => {\n                    if (action && action.name) {\n                        const knownSurveys: string[] | undefined = this._actionToSurveys.get(action.name)\n                        if (knownSurveys) {\n                            knownSurveys.push(survey.id)\n                        }\n                        this._actionToSurveys.set(action.name, knownSurveys || [survey.id])\n                    }\n                })\n            }\n        })\n    }\n\n    private _setupEventBasedSurveys(surveys: Survey[]) {\n        const eventBasedSurveys = surveys.filter(\n            (survey: Survey) => survey.conditions?.events && survey.conditions?.events?.values?.length > 0\n        )\n\n        if (eventBasedSurveys.length === 0) {\n            return\n        }\n\n        // match any events to its corresponding survey.\n        const matchEventToSurvey = (eventName: string, eventPayload?: CaptureResult) => {\n            this.onEvent(eventName, eventPayload)\n        }\n        this._instance?._addCaptureHook(matchEventToSurvey)\n\n        surveys.forEach((survey) => {\n            // maintain a mapping of (Event1) => [Survey1, Survey2, Survey3]\n            // where Surveys 1-3 are all activated by Event1\n            survey.conditions?.events?.values?.forEach((event) => {\n                if (event && event.name) {\n                    const knownSurveys: string[] | undefined = this._eventToSurveys.get(event.name)\n                    if (knownSurveys) {\n                        knownSurveys.push(survey.id)\n                    }\n                    this._eventToSurveys.set(event.name, knownSurveys || [survey.id])\n                }\n            })\n        })\n    }\n\n    onEvent(event: string, eventPayload?: CaptureResult): void {\n        const existingActivatedSurveys: string[] = this._instance?.persistence?.props[SURVEYS_ACTIVATED] || []\n        if (SURVEY_SHOWN_EVENT_NAME === event && eventPayload && existingActivatedSurveys.length > 0) {\n            // remove survey that from activatedSurveys here.\n            logger.info('survey event matched, removing survey from activated surveys', {\n                event,\n                eventPayload,\n                existingActivatedSurveys,\n            })\n            const surveyId = eventPayload?.properties?.$survey_id\n            if (surveyId) {\n                const index = existingActivatedSurveys.indexOf(surveyId)\n                if (index >= 0) {\n                    existingActivatedSurveys.splice(index, 1)\n                    this._updateActivatedSurveys(existingActivatedSurveys)\n                }\n            }\n        } else {\n            if (this._eventToSurveys.has(event)) {\n                logger.info('survey event matched, updating activated surveys', {\n                    event,\n                    surveys: this._eventToSurveys.get(event),\n                })\n                this._updateActivatedSurveys(existingActivatedSurveys.concat(this._eventToSurveys.get(event) || []))\n            }\n        }\n    }\n\n    onAction(actionName: string): void {\n        const existingActivatedSurveys: string[] = this._instance?.persistence?.props[SURVEYS_ACTIVATED] || []\n        if (this._actionToSurveys.has(actionName)) {\n            this._updateActivatedSurveys(existingActivatedSurveys.concat(this._actionToSurveys.get(actionName) || []))\n        }\n    }\n\n    private _updateActivatedSurveys(activatedSurveys: string[]) {\n        // we use a new Set here to remove duplicates.\n        this._instance?.persistence?.register({\n            [SURVEYS_ACTIVATED]: [...new Set(activatedSurveys)],\n        })\n    }\n\n    getSurveys(): string[] {\n        const existingActivatedSurveys = this._instance?.persistence?.props[SURVEYS_ACTIVATED]\n        return existingActivatedSurveys ? existingActivatedSurveys : []\n    }\n\n    getEventToSurveys(): Map<string, string[]> {\n        return this._eventToSurveys\n    }\n\n    _getActionMatcher(): ActionMatcher | null | undefined {\n        return this._actionMatcher\n    }\n}\n"]}