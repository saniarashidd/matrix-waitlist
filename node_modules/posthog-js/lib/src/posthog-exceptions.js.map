{"version":3,"file":"posthog-exceptions.js","sourceRoot":"","sources":["../../src/posthog-exceptions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ERROR_TRACKING_SUPPRESSION_RULES } from './constants'\nimport { PostHog } from './posthog-core'\nimport { ErrorTrackingSuppressionRule, Properties, RemoteConfig } from './types'\nimport { createLogger } from './utils/logger'\nimport { propertyComparisons } from './utils/property-utils'\nimport { isArray, isString } from './utils/type-utils'\n\nconst logger = createLogger('[Error tracking]')\n\nexport class PostHogExceptions {\n    private readonly _instance: PostHog\n    private _suppressionRules: ErrorTrackingSuppressionRule[] = []\n\n    constructor(instance: PostHog) {\n        this._instance = instance\n        this._suppressionRules = this._instance.persistence?.get_property(ERROR_TRACKING_SUPPRESSION_RULES) ?? []\n    }\n\n    onRemoteConfig(response: RemoteConfig) {\n        const suppressionRules = response.errorTracking?.suppressionRules ?? []\n\n        // store this in-memory in case persistence is disabled\n        this._suppressionRules = suppressionRules\n\n        if (this._instance.persistence) {\n            this._instance.persistence.register({\n                [ERROR_TRACKING_SUPPRESSION_RULES]: this._suppressionRules,\n            })\n        }\n    }\n\n    sendExceptionEvent(properties: Properties) {\n        if (this._matchesSuppressionRule(properties)) {\n            logger.info('Skipping exception capture because a suppression rule matched')\n            return\n        }\n\n        this._instance.capture('$exception', properties, {\n            _noTruncate: true,\n            _batchKey: 'exceptionEvent',\n        })\n    }\n\n    private _matchesSuppressionRule(properties: Properties): boolean {\n        const exceptionList = properties.$exception_list\n\n        if (!exceptionList || !isArray(exceptionList) || exceptionList.length === 0) {\n            return false\n        }\n\n        const exceptionValues = exceptionList.reduce(\n            (acc, { type, value }) => {\n                if (isString(type) && type.length > 0) {\n                    acc['$exception_types'].push(type)\n                }\n                if (isString(value) && value.length > 0) {\n                    acc['$exception_values'].push(value)\n                }\n                return acc\n            },\n            {\n                $exception_types: [],\n                $exception_values: [],\n            }\n        )\n\n        return this._suppressionRules.some((rule) => {\n            const results = rule.values.map((v) => {\n                const compare = propertyComparisons[v.operator]\n                const targets = isArray(v.value) ? v.value : [v.value]\n                const values = exceptionValues[v.key] ?? []\n                return targets.length > 0 ? compare(targets, values) : false\n            })\n            return rule.type === 'OR' ? results.some(Boolean) : results.every(Boolean)\n        })\n    }\n}\n"]}