import React, { FunctionComponent } from 'react';
export type Properties = Record<string, any>;
export type PostHogErrorBoundaryFallbackProps = {
    error: unknown;
    componentStack: string;
};
export type PostHogErrorBoundaryProps = {
    children?: React.ReactNode | (() => React.ReactNode);
    fallback?: React.ReactNode | FunctionComponent<PostHogErrorBoundaryFallbackProps>;
    additionalProperties?: Properties | ((error: unknown) => Properties);
};
type PostHogErrorBoundaryState = {
    componentStack: string | null;
    error: unknown;
};
export declare const __POSTHOG_ERROR_MESSAGES: {
    INVALID_FALLBACK: string;
};
export declare class PostHogErrorBoundary extends React.Component<PostHogErrorBoundaryProps, PostHogErrorBoundaryState> {
    static contextType: React.Context<{
        client: import("posthog-js").PostHog;
    }>;
    constructor(props: PostHogErrorBoundaryProps);
    componentDidCatch(error: unknown, errorInfo: React.ErrorInfo): void;
    render(): React.ReactNode;
}
export {};
//# sourceMappingURL=PostHogErrorBoundary.d.ts.map